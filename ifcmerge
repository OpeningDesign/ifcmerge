#!/usr/bin/python3

import sys
import datetime
import ifcopenshell


class Ifc:
    def __init__(self, **args):
        self.file = None
        self.path = None
        self.ids = {}
        self.added = {}
        self.deleted = {}
        self.modified = {}
        for arg in args:
            self.__dict__[arg] = args[arg]
        self.file = ifcopenshell.open(self.path)
        for entity in self.file:
            self.ids[entity.id()] = entity

    def compare(self, other):
        for entity in self.ids:
            if not entity in other.ids:
                self.added[entity] = entity
            elif str(self.ids[entity]) != str(other.ids[entity]):
                self.modified[entity] = entity
        for entity in other.ids:
            if not entity in self.ids:
                self.deleted[entity] = entity

    def last(self):
        return sorted(self.ids)[-1]


base = Ifc(path=sys.argv[1])
local = Ifc(path=sys.argv[2])
remote = Ifc(path=sys.argv[3])
merged = Ifc(path=sys.argv[1])  # note: initially the same as base

local.compare(base)
remote.compare(base)

# TODO if both files have added entities, renumber local added entities to make space
# See ifcpatch/recipes/Optimise.py

index = remote.last() + 1
for entity in local.added:
    if entity in remote.added:
        print("new entities found with duplicate ids! bailing out")
        sys.exit(1)
        index += 1

# local may have been renumbered
local.compare(base)

# copy added entities
# FIXME this breaks, give them the same id as before

for entity in local.added:
    merged.file.create_entity(local.file[entity].is_a(), *local.file[entity])

for entity in remote.added:
    merged.file.create_entity(remote.file[entity].is_a(), *remote.file[entity])

# delete deleted entities

for entity in local.deleted:
    if entity in remote.modified:
        print("local deleted entity modified in remote! bailing out")
        sys.exit(1)
    else:
        merged.file.remove(merged.file.by_id(entity))

for entity in remote.deleted:
    if entity in local.modified:
        print("remote deleted entity modified in local! bailing out")
        sys.exit(1)
    else:
        merged.file.remove(merged.file.by_id(entity))

# update modified entities
# TODO if entity is modified in both, try and merge attributes

for entity in local.modified:
    if entity in remote.modified:
        print("entity modified in both! bailing out")
        sys.exit(1)
    for index in range(len(local.file.by_id(entity))):
        merged.file.by_id(entity)[index] = local.file.by_id(entity)[index]

for entity in remote.modified:
    if entity in local.modified:
        print("entity modified in both! bailing out")
        sys.exit(1)
    for index in range(len(local.file.by_id(entity))):
        merged.file.by_id(entity)[index] = remote.file.by_id(entity)[index]

# success
merged.file.wrapped_data.header.file_name.time_stamp = (
    datetime.datetime.utcnow()
    .replace(tzinfo=datetime.timezone.utc)
    .astimezone()
    .replace(microsecond=0)
    .isoformat()
)
merged.file.write(sys.argv[4])

sys.exit(0)
